$date
  Wed Oct 11 12:45:44 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module alu_tb $end
$var reg 1 ! tb_cin $end
$var reg 32 " tb_op1[31:0] $end
$var reg 32 # tb_op2[31:0] $end
$var reg 32 $ tb_result[31:0] $end
$var reg 1 % tb_cout $end
$var reg 2 & tb_cmd[1:0] $end
$var reg 1 ' tb_z $end
$var reg 1 ( tb_n $end
$var reg 1 ) tb_v $end
$var reg 1 * tb_vdd $end
$var reg 1 + tb_vss $end
$scope module alu1 $end
$var reg 32 , op1[31:0] $end
$var reg 32 - op2[31:0] $end
$var reg 1 . cin $end
$var reg 2 / cmd[1:0] $end
$var reg 32 0 res[31:0] $end
$var reg 1 1 cout $end
$var reg 1 2 z $end
$var reg 1 3 n $end
$var reg 1 4 v $end
$var reg 1 5 vdd $end
$var reg 1 6 vss $end
$var reg 32 7 radd[31:0] $end
$var reg 32 8 resor[31:0] $end
$var reg 32 9 rand[31:0] $end
$var reg 32 : rxor[31:0] $end
$var reg 32 ; rmux[31:0] $end
$scope module mux $end
$var reg 32 < a[31:0] $end
$var reg 32 = b[31:0] $end
$var reg 32 > c[31:0] $end
$var reg 32 ? d[31:0] $end
$var reg 1 @ s0 $end
$var reg 1 A s1 $end
$var reg 32 B z[31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
b00000000000000000000000000010111 "
b00000000000000000000000000001100 #
b00000000000000000000000000100011 $
0%
b00 &
0'
0(
0)
1*
0+
b00000000000000000000000000010111 ,
b00000000000000000000000000001100 -
0.
b00 /
b00000000000000000000000000100011 0
01
02
03
04
15
06
b00000000000000000000000000100011 7
b00000000000000000000000000011111 8
b00000000000000000000000000000100 9
b00000000000000000000000000011011 :
b00000000000000000000000000100011 ;
b00000000000000000000000000100011 <
b00000000000000000000000000011111 =
b00000000000000000000000000000100 >
b00000000000000000000000000011011 ?
0@
0A
b00000000000000000000000000100011 B
#10000000
