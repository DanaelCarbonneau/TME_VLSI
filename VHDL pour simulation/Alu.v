/* Generated by Yosys 0.30+1 (git sha1 5813809ad, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os) */

module Alu(op1, op2, cin, cmd, vdd, vss, res, cout, z, n, v);
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  input cin;
  wire cin;
  input [1:0] cmd;
  wire [1:0] cmd;
  output cout;
  wire cout;
  wire [31:0] ecin;
  wire [31:0] \mux:13 ;
  output n;
  wire n;
  input [31:0] op1;
  wire [31:0] op1;
  input [31:0] op2;
  wire [31:0] op2;
  wire [31:0] radd;
  wire [31:0] \rand ;
  output [31:0] res;
  wire [31:0] res;
  wire [31:0] resor;
  wire [31:0] rmux;
  wire [31:0] rxor;
  output v;
  wire v;
  input vdd;
  wire vdd;
  input vss;
  wire vss;
  output z;
  wire z;
  assign rxor = op1 ^ op2;
  assign _06_ = ~ cmd[0];
  assign _07_ = ~ cmd[1];
  assign _08_ = _06_ & _07_;
  assign _01_ = op1[31] & op2[31];
  assign _02_ = ~ radd[31];
  assign _03_ = op1[31] | op2[31];
  assign _04_ = _02_ & _03_;
  assign _05_ = _01_ | _04_;
  assign cout = _08_ & _05_;
  assign _09_ = ~ op1[31];
  assign _10_ = ~ op2[31];
  assign _11_ = _09_ & _10_;
  assign _12_ = _11_ & radd[31];
  assign _13_ = _01_ & _02_;
  assign _14_ = _12_ | _13_;
  assign v = _08_ & _14_;
  assign n = _08_ & radd[31];
  assign _00_ = op1 + op2;
  assign _15_ = ! rmux;
  assign z = _15_ ? 1'h1 : 1'h0;
  assign radd = _00_ + { 31'h00000000, cin };
  assign resor = op1 | op2;
  assign \rand  = op1 & op2;
  mux_4to1 mux (
    .a(radd),
    .b(resor),
    .c(\rand ),
    .d(rxor),
    .s0(cmd[0]),
    .s1(cmd[1]),
    .z(rmux)
  );
  assign ecin = { 31'h00000000, cin };
  assign \mux:13  = rmux;
  assign res = rmux;
endmodule

module mux_4to1(a, b, c, d, s0, s1, z);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire [31:0] _5_;
  wire [31:0] _6_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  input [31:0] c;
  wire [31:0] c;
  input [31:0] d;
  wire [31:0] d;
  input s0;
  wire s0;
  input s1;
  wire s1;
  output [31:0] z;
  wire [31:0] z;
  assign _0_ = ~ s1;
  assign _1_ = ~ s0;
  assign _2_ = _1_ & _0_;
  assign _3_ = _1_ & s1;
  assign _4_ = s0 & _0_;
  assign _5_ = _4_ ? c : d;
  assign _6_ = _3_ ? b : _5_;
  assign z = _2_ ? a : _6_;
endmodule
